@inject NavigationManager NavigationManager
@inject SessionStorageService SessionStorage
@inject HttpClient HttpClient
@using BlazorStandAlone.Components
@page "/admin"

<PageTitle>Admin</PageTitle>

<h1>Admin Dashboard</h1>

<Popup @ref="popupRef" Title="Success" Message="@PopupMessage"></Popup>

<div class="admin-container">
    <div class="userBox">
        <div class="amountSquare userAmount">Amount of Users: @userNumber</div>
        <input @bind="userId" />
        <button @onclick="GetUserById">Search User By Id</button>
        <button @onclick="AddUser">Add new user</button>
        <div class="CurrentUserBox">
            @if (SearchUser && CurrentUser != null)
            {
                <div class="usersId">User ID: @CurrentUser.Id</div>
                <div class="usersuserName">Username: @CurrentUser.Username</div>
                <div class="usersEmail">User Email: @CurrentUser.Email</div>
                <div class="userPhoneNumber">User PhoneNumber: @CurrentUser.PhoneNumber</div>
                <div class="usersRole">User Role: @CurrentUser.Role</div>
                <div class="userCreatedAt">Created at: @CurrentUser.CreatedAt</div>
                <div class="usersTickets">
                    <h3>User's Tickets</h3>
                    @foreach (var ticket in CurrentUser.Tickets)
                    {
                        <div>
                            <strong>Ticket ID:</strong> @ticket.Id
                            <br />
                            <strong>Title:</strong> @ticket.Title
                        </div>
                    }
                </div>
                <button @onclick="() => EditUser(CurrentUser)">Edit</button>
                <button @onclick="DeleteUser">Delete</button>
                <button @onclick="ClearUser">Clear</button>
            }
            @if (UserFormVisible)
            {
                <UserForm UserModel="CurrentUser"
                IsUserEditMode="@IsUserEditMode"
                OnSave="SaveUser"
                OnCancel="HideUserForm" />
            }
        </div>
    </div>

    <div class="ticketBox">
        <div class="amountSquare ticketAmount">Amount of Tickets: @ticketNumber</div>
        <input @bind="ticketId" />
        <button @onclick="GetTicketById">Search Ticket By Id</button>
        <button @onclick="AddTicket">Add new ticket</button>
        <div class="CurrentTicketBox">
            @if (SearchTicket && CurrentTicket != null)
            {
                <div class="ticketsId">Ticket ID: @CurrentTicket.Id</div>
                <div class="ticketsUserId">Ticket UserID: @CurrentTicket.UserId</div>
                <div class="ticketsEventId">Ticket EventID: @CurrentTicket.EventId</div>
                <div class="ticketsPrice">Ticket Price: @CurrentTicket.Price</div>
                <div class="ticketsSeat">Seat: @CurrentTicket.Seat</div>
                <!--<div class="ticketsTitle">Title for event: @CurrentTicket.Title</div>-->
                <button @onclick="DeleteTicket">Delete</button>
                <button @onclick="ClearTicket">Clear</button>
            }
            @if(TicketFormVisible)
            {
                <TicketForm TicketModel="CurrentTicket"
                OnSave="SaveTicket"
                OnCancel="HideTicketForm"/>
            }
        </div>
    </div>

    <div class="eventBox">
        <div class="amountSquare eventAmount">Amount of Events: @eventNumber</div>
        <input @bind="eventId" />
        <button @onclick="GetEventById">Search Event By Id</button>
        <button @onclick="AddEvent">Add new event</button>
        <div class="CurrentEventBox">
            @if (SearchEvent && CurrentEvent != null)
            {
                <div class="eventsId">Event ID: @CurrentEvent.Id</div>
                <div class="eventsName">Event name: @CurrentEvent.Name</div>
                <div class="eventsCity">City: @CurrentEvent.City</div>
                <div class="eventsAddress">Address = @CurrentEvent.Address</div>
                <div class="eventsAccessType">AccessType: @CurrentEvent.AccessType</div>
                <div class="eventsStartTime">Start Time: @CurrentEvent.StartTime</div>
                <div class="eventsEndTime">End Time: @CurrentEvent.EndTime</div>
                <div class="eventsHasSeats">Designated seats: @CurrentEvent.HasSeat</div>
                <div class="eventsImagePath">Image path: @CurrentEvent.ImagePath</div>
                <div class="eventsTicketsMax">Max tickets: @CurrentEvent.TicketsMax</div>
                <div class="eventsTicketSold">Tickets sold: @CurrentEvent.TicketsSold</div>
                <button @onclick="() => EditEvent(CurrentEvent)">Edit</button>
                <button @onclick="DeleteEvent">Delete</button>
                <button @onclick="ClearEvent">Clear</button>
            }
            @if (EventFormVisible)
            {
                <EventForm EventModel="CurrentEvent"
                IsEventEditMode="@IsEventEditMode"
                OnSave="SaveEvent"
                OnCancel="HideEventForm" />
            }
        </div>
    </div>
</div>

@code {
    //pagewide
    private LoginDto? user;
    private Popup? popupRef;
    private string PopupMessage = String.Empty;
    private bool development = true;

    //events
    public List<EventDto> events { get; set; } = new();
    public int eventNumber { get; set; }
    public int eventId { get; set; }
    private bool EventFormVisible = false;
    private bool IsEventEditMode = false;
    private bool SearchEvent = false;
    public EventDto? CurrentEvent { get; set; } = null;

    //users
    public List<UserDto> users { get; set; } = new();
    public int userNumber { get; set; }
    public int userId { get; set; }
    private bool UserFormVisible = false;
    private bool IsUserEditMode = false;
    private bool SearchUser = false;
    public UserDto? CurrentUser { get; set; } = null;

    //tickets
    public List<TicketDto> tickets { get; set; } = new();
    public int ticketNumber { get; set; }
    public int ticketId { get; set; }
    private bool TicketFormVisible = false;
    private bool SearchTicket = false;
    public TicketDto? CurrentTicket { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (development)
        {
            user = new LoginDto() { Username = "admin", Role = UserRole.Admin };
        }
        else
        {
            user = await SessionStorage.GetItemAsync<LoginDto>("user");
        }

        if (user == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (user.Role != UserRole.Admin)
        {
            NavigationManager.NavigateTo("/");
        }

        await PopulateLists();
    }

    private async Task PopulateLists()
    {
        await GetEventsAsync();
        await GetTicketsAsync();
        await GetUsersAsync();
    }

    //events
    private async Task GetEventsAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/event/get");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventDto>>() ?? new();
                eventNumber = events.Count;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching events: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching events: {ex.Message}");
        }
    }

    private void GetEventById()
    {
        HideEventForm();
        CurrentEvent = events.Where(e => e.Id == eventId).FirstOrDefault();
        if (CurrentEvent == null)
        {
            Console.WriteLine("event was not found");
        }
        else
        {
            SearchEvent = true;
        }
    }

    private void EditEvent(EventDto ev)
    {
        CurrentEvent = new EventDto
            {
                Id = ev.Id,
                Name = ev.Name,
                Description = ev.Description,
                City = ev.City,
                Address = ev.Address,
                AccessType = ev.AccessType,
                StartTime = ev.StartTime,
                EndTime = ev.EndTime,
                HasSeat = ev.HasSeat,
                ImagePath = ev.ImagePath,
                TicketsMax = ev.TicketsMax,
                TicketsSold = ev.TicketsSold
            };
        IsEventEditMode = true;
        EventFormVisible = true;
        SearchEvent = false;
    }

    private void HideEventForm() => EventFormVisible = false;

    private async void SaveEvent(EventDto ev)
    {
        if (IsEventEditMode)
        {
            await UpdateEvent(ev);
        }
        else
        {
            await CreateEvent(ev);
        }
        HideEventForm();
    }

    private void AddEvent()
    {
        ClearEvent();
        CurrentEvent = new EventDto() { Name = null, City = null, Description = null, Address = null, StartTime = DateTime.Now, EndTime = DateTime.Now.AddHours(1), ImagePath = "hehe" };
        IsEventEditMode = false;
        EventFormVisible = true;
    }

    private async Task CreateEvent(EventDto ev)
    {
        var response = await HttpClient.PostAsJsonAsync("api/event/create", ev);
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "Event created successfully.";
            popupRef?.Show();
            await GetEventsAsync();
            ClearEvent();
        }
        else
        {
            Console.WriteLine($"error: {response.ReasonPhrase}");
        }
    }

    private async Task UpdateEvent(EventDto ev)
    {
        var response = await HttpClient.PutAsJsonAsync($"api/event/update/{ev.Id}", ev);
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "Event updated succesfully!";
            popupRef?.Show();
            await GetEventsAsync();
            ClearEvent();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private async Task DeleteEvent()
    {
        if (CurrentEvent == null)
        {
            Console.WriteLine("No event selected, can not delete");
            return;
        }
        var response = await HttpClient.DeleteAsync($"api/event/delete/{CurrentEvent.Id}");
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "Event deleted successfully";
            popupRef?.Show();
            await GetEventsAsync();
            ClearEvent();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private void ClearEvent()
    {
        SearchEvent = false;
        CurrentEvent = null;
    }

    //users
    private async Task GetUsersAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/user/get");
            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<UserDto>>() ?? new();
                userNumber = users.Count;
                foreach(var user in users)
                {
                    user.Tickets = GetUserTickets(user.Id);
                }
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching users: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching users: {ex.Message}");
        }
    }

    private List<TicketDto> GetUserTickets(int userId)
    {

        List<TicketDto> list = tickets.Where(t => t.UserId == userId).ToList();
        Console.WriteLine(list.Count);
        return list;
    }

    private void GetUserById()
    {
        HideUserForm();
        CurrentUser = users.Where(u => u.Id == userId).FirstOrDefault();
        if (CurrentUser == null)
        {
            Console.WriteLine("user was not found");
        }
        else
        {
            SearchUser = true;
        }
    }

    private void EditUser(UserDto user)
    {
        CurrentUser = new UserDto
            {
                Id = user.Id,
                Username = user.Username,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Role = user.Role,
                Tickets = user.Tickets
            };
        IsUserEditMode = true;
        UserFormVisible = true;
        SearchUser = false;
    }

    private void HideUserForm() => UserFormVisible = false;

    private async void SaveUser(UserDto user)
    {
        if (IsUserEditMode)
        {
            await UpdateUser(user);
        }
        else
        {
            await CreateUser(user);
        }
        HideUserForm();
    }

    private void AddUser()
    {
        ClearUser();
        CurrentUser = new UserDto() { Username = null, Email = null, PhoneNumber = null, Role = UserRole.User, CreatedAt = DateTime.Now };
        IsUserEditMode = false;
        UserFormVisible = true;

    }

    private async Task CreateUser(UserDto user)
    {
        var newUser = new RegisterUserDto(user.Username, user.Email, user.PhoneNumber, user.Role);

        var response = await HttpClient.PostAsJsonAsync("api/user/create", newUser);
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "User created successfully.";
            popupRef?.Show();
            UserFormVisible = false;
            await GetUsersAsync();
            ClearUser();

        }
        else
        {
            Console.WriteLine($"error: {response.ReasonPhrase}");
        }
    }

    private async Task UpdateUser(UserDto user)
    {
        var newUser = new RegisterUserDto(user.Username, user.Email, user.PhoneNumber, user.Role);

        var response = await HttpClient.PutAsJsonAsync($"api/user/update/{user.Id}", user);
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "User updated successfully!";
            popupRef?.Show();
            await GetUsersAsync();
            ClearUser();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private async Task DeleteUser()
    {
        if (CurrentUser == null)
        {
            Console.WriteLine("No user selected, can not delete");
            return;
        }
        var response = await HttpClient.DeleteAsync($"api/user/delete/{CurrentUser.Id}");
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "User deleted successfully";
            popupRef?.Show();
            await GetUsersAsync();
            ClearUser();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private void ClearUser()
    {
        SearchUser = false;
        CurrentUser = null;
    }

    //tickets
    private async Task GetTicketsAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/ticket/get");
            if (response.IsSuccessStatusCode)
            {
                tickets = await response.Content.ReadFromJsonAsync<List<TicketDto>>() ?? new();
                ticketNumber = tickets.Count;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching tickets: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching tickets: {ex.Message}");
        }
    }

    private void GetTicketById()
    {
        HideTicketForm();
        CurrentTicket = tickets.Where(t => t.Id == ticketId).FirstOrDefault();
        if (CurrentTicket == null)
        {
            Console.WriteLine("ticket was not found");
        }
        else
        {
            SearchTicket = true;
        }
    }


    private void HideTicketForm() => TicketFormVisible = false;

    private async void SaveTicket(TicketDto ticket)
    {
        await CreateTicket(ticket);
        HideTicketForm();
    }

    private void AddTicket()
    {
        ClearTicket();
        CurrentTicket = new TicketDto() { UserId = 0, EventId = 0, Price = 0, Seat = null };
        TicketFormVisible = true;
    }

    private async Task CreateTicket(TicketDto ticket)
    {
        var response = await HttpClient.PostAsJsonAsync("api/ticket/create", ticket);
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "Ticket created successfully.";
            popupRef?.Show();
            await GetTicketsAsync();
            ClearTicket();
        }
        else
        {
            Console.WriteLine($"error: {response.ReasonPhrase}");
        }
    }

    private async Task DeleteTicket()
    {
        if (CurrentTicket == null)
        {
            Console.WriteLine("No ticket selected, can not delete");
            return;
        }
        var response = await HttpClient.DeleteAsync($"api/ticket/delete/{CurrentTicket.Id}");
        if (response.IsSuccessStatusCode)
        {
            PopupMessage = "Ticket deleted successfully";
            popupRef?.Show();
            await GetTicketsAsync();
            ClearTicket();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private void ClearTicket()
    {
        SearchTicket = false;
        CurrentTicket = null;
    }
}
