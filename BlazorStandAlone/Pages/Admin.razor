@inject NavigationManager NavigationManager
@inject SessionStorageService SessionStorage
@inject HttpClient HttpClient
@inject IUserService UserService
@using BlazorStandAlone.Components
@layout NoHeaderLayout
@page "/admin"

<PageTitle>Admin</PageTitle>

<div class="admin-background"></div>
<h1 class="admin-title">Admin Dashboard</h1>
<Popup @ref="popupRef" Title="@PopupTitle" Message="@PopupMessage"></Popup>

<div class="admin-container">
    <div class="box">
        <div class="box-header">Amount of Users: @UserService.UserCount</div>
        <div class="search-section">
            <input @bind="_userId" placeholder="Enter User ID" />
            <button @onclick="GetUserById">Search</button>
            <button @onclick="AddUser">Add User</button>
        </div>
        <div class="box-content">
            @if (_searchUser && _currentUser != null)
            {
                <div class="info-box"><strong>User ID:</strong> @_currentUser.Id</div>
                <div class="info-box"><strong>Username:</strong> @_currentUser.Username</div>
                <div class="info-box"><strong>User Email:</strong> @_currentUser.Email</div>
                <div class="info-box"><strong>User PhoneNumber:</strong> @_currentUser.PhoneNumber</div>
                <div class="info-box"><strong>User Role:</strong> @_currentUser.Role</div>
                <div class="info-box"><strong>Created at:</strong> @_currentUser.CreatedAt</div>
                <div class="user-tickets">
                    <h3>User's Tickets</h3>
                    @if (_currentUser.Tickets != null)
                    {
                        @foreach (var ticket in _currentUser.Tickets)
                        {
                            <div>
                                <div>
                                    <strong>Ticket ID:</strong> @ticket.Id
                                    <br />
                                    <strong>Title:</strong> @ticket.Title
                                </div>
                                <div><button @onclick="() => DeleteTicket(ticket.Id)">Delete</button></div>
                            </div>
                        }
                    }
                </div>
                <button @onclick="() => EditUser(_currentUser)">Edit</button>
                <button @onclick="() => DeleteUser(_currentUser.Id)">Delete</button>
                <button @onclick="ClearUser">Clear</button>
            }
            @if (_userFormVisible)
            {
                <UserForm UserModel="@_currentUser"
                         IsUserEditMode="@_isUserEditMode"
                         OnSave="SaveUser"
                         OnCancel="HideUserForm" />
            }
        </div>
    </div>

    <div class="box">
        <div class="box-header">Amount of Tickets: @ticketNumber</div>
        <div class="search-section">
            <input @bind="ticketId" placeholder="Enter Ticket ID" />
            <button @onclick="GetTicketById">Search</button>
            <button @onclick="AddTicket">Add Ticket</button>
        </div>
        <div class="box-content">
            @if (SearchTicket && CurrentTicket != null)
            {
                <div class="info-box"><strong>Ticket ID:</strong> @CurrentTicket.Id</div>
                <div class="info-box"><strong>Ticket UserID:</strong> @CurrentTicket.UserId</div>
                <div class="info-box"><strong>Ticket EventID:</strong> @CurrentTicket.EventId</div>
                <div class="info-box"><strong>Ticket Price:</strong> @CurrentTicket.Price</div>
                <div class="info-box"><strong>Seat:</strong> @CurrentTicket.Seat</div>
                <button @onclick="() => DeleteTicket(CurrentTicket.Id)">Delete</button>
                <button @onclick="ClearTicket">Clear</button>
            }
            @if (TicketFormVisible)
            {
                <TicketForm TicketModel="CurrentTicket"
                OnSave="SaveTicket"
                OnCancel="HideTicketForm" />
            }
        </div>
    </div>

    <div class="box">
        <div class="box-header">Amount of Events: @eventNumber</div>
        <div class="search-section">
            <input @bind="eventId" placeholder="Enter Event ID" />
            <button @onclick="GetEventById">Search</button>
            <button @onclick="AddEvent">Add Event</button>
        </div>
        <div class="box-content">
            @if (SearchEvent && CurrentEvent != null)
            {
                <div class="info-box"><strong>Event ID:</strong> @CurrentEvent.Id</div>
                <div class="info-box"><strong>Event name:</strong> @CurrentEvent.Name</div>
                <div class="info-box"><strong>City:</strong> @CurrentEvent.City</div>
                <div class="info-box"><strong>Address:</strong> @CurrentEvent.Address</div>
                <div class="info-box"><strong>AccessType:</strong> @CurrentEvent.AccessType</div>
                <div class="info-box"><strong>Start Time:</strong> @CurrentEvent.StartTime</div>
                <div class="info-box"><strong>End Time:</strong> @CurrentEvent.EndTime</div>
                <div class="info-box"><strong>Designated seats:</strong> @CurrentEvent.HasSeat</div>
                <div class="info-box"><strong>Image path:</strong> @CurrentEvent.ImagePath</div>
                <div class="info-box"><strong>Max tickets:</strong> @CurrentEvent.TicketsMax</div>
                <div class="info-box"><strong>Tickets sold:</strong> @CurrentEvent.TicketsSold</div>
                <button @onclick="() => EditEvent(CurrentEvent)">Edit</button>
                <button @onclick="DeleteEvent">Delete</button>
                <button @onclick="ClearEvent">Clear</button>
            }
            @if (EventFormVisible)
            {
                <EventForm EventModel="CurrentEvent"
                IsEventEditMode="@IsEventEditMode"
                OnSave="SaveEvent"
                OnCancel="HideEventForm" />
            }
        </div>
    </div>
</div>

@code {
    // Page-wide
    private LoginDto? user;
    private Popup? popupRef;
    private string PopupMessage = string.Empty;
    private string PopupTitle = "Notification";
    private bool development = true;

    // User-related state
    private bool _userFormVisible;
    private bool _isUserEditMode;
    private bool _searchUser;
    private UserDto? _currentUser;
    private int _userId;

    //events
    public List<EventDto> events { get; set; } = new();
    public int eventNumber { get; set; }
    public int eventId { get; set; }
    private bool EventFormVisible = false;
    private bool IsEventEditMode = false;
    private bool SearchEvent = false;
    public EventDto? CurrentEvent { get; set; } = null;

    //tickets
    public List<TicketDto> tickets { get; set; } = new();
    public int ticketNumber { get; set; }
    public int ticketId { get; set; }
    private bool TicketFormVisible = false;
    private bool SearchTicket = false;
    public TicketDto? CurrentTicket { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (development)
        {
            user = new LoginDto() { Username = "admin", Role = UserRole.Admin };
        }
        else
        {
            user = await SessionStorage.GetItemAsync<LoginDto>("user");
        }

        if (user == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        if (user.Role != UserRole.Admin)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        await PopulateLists();
    }

    private async Task PopulateLists()
    {
        await HandleUserOperation(async () =>
        {
            await GetEventsAsync();
            await GetTicketsAsync();
            await UserService.GetAllUsers();
        }, "Lists populated successfully");
    }

    private async Task GetUserById()
    {
        HideUserForm();
        var user = await UserService.GetUserById(_userId);
        if (user == null)
        {
            ShowPopup("Error", "User not found");
        }
        else
        {
            _currentUser = user;
            _searchUser = true;
        }
    }

    private void EditUser(UserDto user)
    {
        _currentUser = new UserDto
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email,
            PhoneNumber = user.PhoneNumber,
            Role = user.Role,
            Tickets = user.Tickets,
            CreatedAt = user.CreatedAt
        };
        _isUserEditMode = true;
        _userFormVisible = true;
        _searchUser = false;
    }

    private void HideUserForm() => _userFormVisible = false;

    private async Task SaveUser(UserDto user)
    {
        await HandleUserOperation(async () =>
        {
            if (_isUserEditMode)
            {
                await UserService.UpdateUser(user);
                ShowPopup("Success", "User updated successfully");
            }
            else
            {
                await UserService.CreateUser(user);
                ShowPopup("Success", "User created successfully");
            }
            HideUserForm();
            StateHasChanged();
        }, null);
    }

    private void AddUser()
    {
        ClearUser();
        _currentUser = new UserDto() 
        { 
            Username = null!, 
            Email = null!, 
            PhoneNumber = null, 
            Role = UserRole.User, 
            CreatedAt = DateTime.Now 
        };
        _isUserEditMode = false;
        _userFormVisible = true;
    }

    private async Task DeleteUser(int id)
    {
        await HandleUserOperation(async () =>
        {
            if (await UserService.DeleteUser(id))
            {
                ClearUser();
                ShowPopup("Success", "User deleted successfully");
            }
        }, null);
    }

    private void ClearUser()
    {
        _searchUser = false;
        _currentUser = null;
        _userFormVisible = false;
    }

    private async Task HandleUserOperation(Func<Task> operation, string? successMessage)
    {
        try
        {
            await operation();
            if (!string.IsNullOrEmpty(successMessage))
            {
                ShowPopup("Success", successMessage);
            }
        }
        catch (UserServiceException ex)
        {
            ShowPopup("Error", ex.Message);
        }
        catch (Exception ex)
        {
            ShowPopup("Error", "An unexpected error occurred");
            Console.WriteLine($"Unexpected error: {ex}");
        }
    }

    private void ShowPopup(string title, string message)
    {
        PopupTitle = title;
        PopupMessage = message;
        popupRef?.Show();
    }

    //events
    private async Task GetEventsAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/event/get");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventDto>>() ?? new();
                eventNumber = events.Count;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching events: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching events: {ex.Message}");
        }
    }

    private void GetEventById()
    {
        HideEventForm();
        CurrentEvent = events.Where(e => e.Id == eventId).FirstOrDefault();
        if (CurrentEvent == null)
        {
            Console.WriteLine("event was not found");
        }
        else
        {
            SearchEvent = true;
        }
    }

    private void EditEvent(EventDto ev)
    {
        CurrentEvent = new EventDto
            {
                Id = ev.Id,
                Name = ev.Name,
                Description = ev.Description,
                City = ev.City,
                Address = ev.Address,
                AccessType = ev.AccessType,
                StartTime = ev.StartTime,
                EndTime = ev.EndTime,
                HasSeat = ev.HasSeat,
                ImagePath = ev.ImagePath,
                TicketsMax = ev.TicketsMax,
                TicketsSold = ev.TicketsSold
            };
        IsEventEditMode = true;
        EventFormVisible = true;
        SearchEvent = false;
    }

    private void HideEventForm() => EventFormVisible = false;

    private async void SaveEvent(EventDto ev)
    {
        if (IsEventEditMode)
        {
            await UpdateEvent(ev);
        }
        else
        {
            await CreateEvent(ev);
        }
        HideEventForm();
        StateHasChanged();
    }

    private void AddEvent()
    {
        ClearEvent();
        CurrentEvent = new EventDto() { Name = null!, City = null!, Description = null!, Address = null!, StartTime = DateTime.Now, EndTime = DateTime.Now.AddHours(1), ImagePath = "hehe" };
        IsEventEditMode = false;
        EventFormVisible = true;
    }

    private async Task CreateEvent(EventDto ev)
    {
        var response = await HttpClient.PostAsJsonAsync("api/event/create", ev);
        if (response.IsSuccessStatusCode)
        {
            await GetEventsAsync();
            ClearEvent();
            PopupMessage = "Event created successfully.";
            popupRef?.Show();
        }
        else
        {
            Console.WriteLine($"error: {response.ReasonPhrase}");
        }
    }

    private async Task UpdateEvent(EventDto ev)
    {
        var response = await HttpClient.PutAsJsonAsync($"api/event/update/{ev.Id}", ev);
        if (response.IsSuccessStatusCode)
        {
            await GetEventsAsync();
            ClearEvent();
            PopupMessage = "Event updated succesfully!";
            popupRef?.Show();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private async Task DeleteEvent()
    {
        if (CurrentEvent == null)
        {
            Console.WriteLine("No event selected, can not delete");
            return;
        }
        var response = await HttpClient.DeleteAsync($"api/event/delete/{CurrentEvent.Id}");
        if (response.IsSuccessStatusCode)
        {
            await GetEventsAsync();
            ClearEvent();
            PopupMessage = "Event deleted successfully";
            popupRef?.Show();
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private void ClearEvent()
    {
        SearchEvent = false;
        CurrentEvent = null;
    }

    //tickets
    private async Task GetTicketsAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/ticket/get");
            if (response.IsSuccessStatusCode)
            {
                tickets = await response.Content.ReadFromJsonAsync<List<TicketDto>>() ?? new();
                ticketNumber = tickets.Count;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching tickets: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching tickets: {ex.Message}");
        }
    }

    private void GetTicketById()
    {
        HideTicketForm();
        CurrentTicket = tickets.Where(t => t.Id == ticketId).FirstOrDefault();
        if (CurrentTicket == null)
        {
            Console.WriteLine("ticket was not found");
        }
        else
        {
            SearchTicket = true;
        }
    }


    private void HideTicketForm() => TicketFormVisible = false;

    private async void SaveTicket(TicketDto ticket)
    {
        await CreateTicket(ticket);
        HideTicketForm();
    }

    private void AddTicket()
    {
        ClearTicket();
        CurrentTicket = new TicketDto() { UserId = 0, EventId = 0, Price = 0, Seat = null };
        TicketFormVisible = true;
    }

    private async Task CreateTicket(TicketDto ticket)
    {
        var response = await HttpClient.PostAsJsonAsync("api/ticket/create", ticket);
        if (response.IsSuccessStatusCode)
        {
            await GetTicketsAsync();
            ClearTicket();
            PopupMessage = "Ticket created successfully.";
            popupRef?.Show();
        }
        else
        {
            Console.WriteLine($"error: {response.ReasonPhrase}");
        }
    }

    private async Task DeleteTicket(int ticketId)
    {
        var response = await HttpClient.DeleteAsync($"api/ticket/delete/{ticketId}");
        if (response.IsSuccessStatusCode)
        {
            await GetTicketsAsync();
            ClearTicket();
            PopupMessage = "Ticket deleted successfully";
            popupRef?.Show();

            if (_currentUser != null)
            {
                await UserService.GetAllUsers();
                _currentUser = UserService.Users.FirstOrDefault(u => u.Id == _currentUser.Id);
                if (_currentUser != null)
                {
                    _currentUser.Tickets = UserService.GetUserTickets(_currentUser.Id);
                }
            }
        }
        else
        {
            Console.WriteLine($"error: {response.StatusCode}");
        }
    }

    private void ClearTicket()
    {
        SearchTicket = false;
        CurrentTicket = null;
    }
}

