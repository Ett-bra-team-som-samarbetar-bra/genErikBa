@using Blazor.Models;
@using Core.Models;
@using Core.Services;
@inject NavigationManager NavigationManager
@inject SessionStorageService SessionStorage
@inject HttpClient HttpClient

@page "/admin"

<PageTitle>Admin</PageTitle>

<h1>Admin Dashboard</h1>

<div class="admin-container">
    <div class="userBox">
        <div class="amountSquare userAmount">@userNumber</div>
        <div class="foundUserBox">
            @if (foundUser != null)
            {
                <div class="usersId">User ID: @foundUser.Id</div>
                <div class="usersuserName">Username: @foundUser.Username</div>
                <div class="usersEmail">User Email: @foundUser.Email</div>
                <div class="userPhoneNumber">User PhoneNumber: @foundUser.PhoneNumber</div>
                <div class="usersRole">User Role: @foundUser.Role</div>
                <div class="usersTickets">
                    <h3>User's Tickets</h3>
                    @foreach (var ticket in foundUser.Tickets)
                    {
                        <div>
                            <strong>Ticket ID:</strong> @ticket.Id
                            <br />
                            <strong>Title:</strong> @ticket.Title
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="ticketBox">
        <div class="amountSquare ticketAmount">@ticketNumber</div>
        <div class="foundTicketBox">
            @if (foundTicket != null)
            {
                <div class="ticketsId">Ticket ID: @foundTicket.Id</div>
                <div class="ticketsUserId">Ticket UserID: @foundTicket.UserId</div>
                <div class="ticketsEventId">Ticket EventID: @foundTicket.EventId</div>
                <div class="ticketsPrice">Ticket Price: @foundTicket.Price</div>
                <div class="ticketsSeat">Seat: @foundTicket.Seat</div>
                <div class="ticketsTitle">Title for event: @foundTicket.Title</div>
            }
        </div>
    </div>

    <div class="eventBox">
        <div class="amountSquare eventAmount">@eventNumber</div>
        <input @bind="eventId" />
        <button @onclick="GetEventById">Search Event By Id</button>
        <div class="foundEventBox">
            @if (foundEvent != null)
            {
                <div class="eventsId">Event ID: @foundEvent.Id</div>
                <div class="eventsName">Event name: @foundEvent.Name</div>
                <div class="eventsCity">City: @foundEvent.City</div>
                <div class="eventsAccessType">AccessType: @foundEvent.AccessType</div>
                <div class="eventsStartTime">Start Time: @foundEvent.StartTime</div>
                <div class="eventsEndTime">End Time: @foundEvent.EndTime</div>
                <div class="eventsTicketSold">Tickets sold: @foundEvent.TicketsSold</div>
                <div class="eventsTicketsMax">Max tickets: @foundEvent.TicketsMax</div>
                <div class="eventsHasSeats">Designated seats: @foundEvent.HasSeat</div>
            }
            <button>Edit</button>
            <button>Delete</button>
            <button @onclick="ClearEvent">Clear</button>
        </div>
    </div>
</div>

@code {
    private LoginDto? user;

    private bool development = true;

    public List<EventDto> events { get; set; } = new();
    public int eventNumber { get; set; }
    public int eventId { get; set; }

    public List<UserDto> users { get; set; } = new();
    public int userNumber { get; set; }

    public List<TicketDto> tickets { get; set; } = new();
    public int ticketNumber { get; set; }


    public UserDto? foundUser { get; set; } = null;
    public TicketDto? foundTicket { get; set; } = null;
    public EventDto? foundEvent { get; set; } = null;



    protected override async Task OnInitializedAsync()
    {
        if (development)
        {
            user = new LoginDto() { Username = "admin", Role = UserRole.Admin };
        }
        else
        {
            user = await SessionStorage.GetItemAsync<LoginDto>("user");
        }

        if (user == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (user.Role != UserRole.Admin)
        {
            NavigationManager.NavigateTo("/");
        }

        await PopulateLists();
    }

    private async Task GetEventsAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/event/get");
            if (response.IsSuccessStatusCode)
            {
                events = await response.Content.ReadFromJsonAsync<List<EventDto>>() ?? new();
                eventNumber = events.Count;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error fetching events: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception while fetching events: {ex.Message}");
        }
    }

    private async Task GetUsersAsync()
    {
        // Implement user fetching
        users = new List<UserDto>();
        userNumber = users.Count;
    }

    private async Task GetTicketsAsync()
    {
        // Implement ticket fetching
        tickets = new List<TicketDto>();
        ticketNumber = tickets.Count;
    }

    private async Task PopulateLists()
    {
        await GetEventsAsync();
        await GetUsersAsync();
        await GetTicketsAsync();
    }

    private void GetEventById()
    {
        foundEvent = events.Where(e => e.Id == eventId).FirstOrDefault();
        if (foundEvent == null)
        {
            Console.WriteLine("event was not found");
        }
    }

    private void ClearEvent()
    {
        foundEvent = null;
    }
}
