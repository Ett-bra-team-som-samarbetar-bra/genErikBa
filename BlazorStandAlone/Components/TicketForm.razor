@* TicketForm.razor*@
@inject IEventService EventService

<EditForm Model="TicketModel" OnValidSubmit="HandleSubmit" class="edit-form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h3>Create New Ticket</h3>

    <div class="form-group">
        <label><strong>User Id:</strong></label>
        <InputNumber @bind-Value="TicketModel.UserId" />
        <ValidationMessage For="@(() => TicketModel.UserId)" />
    </div>

    <div class="form-group">
        <label><strong>Event:</strong></label>
        <InputSelect @bind-Value="TicketModel.EventId" @bind-Value:after="@OnEventSelected">
            <option value="">Select an event...</option>
            @foreach (var ev in PaidEvents)
            {
                <option value="@ev.Id">@ev.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => TicketModel.EventId)" />
    </div>

    @if (_selectedEventHasSeats)
    {
        <div class="form-group">
            <label><strong>Seat:</strong></label>
            <InputText @bind-Value="TicketModel.Seat" />
            <ValidationMessage For="@(() => TicketModel.Seat)" />
        </div>
    }

    <div class="button-container">
        <button type="submit">Save</button>
        <button type="button" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public TicketDto TicketModel { get; set; } = new();
    [Parameter] public EventCallback<TicketDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<EventDto> PaidEvents { get; set; } = new();
    private bool _selectedEventHasSeats;

    protected override async Task OnInitializedAsync()
    {
        await LoadPaidEvents();
    }

    private async Task LoadPaidEvents()
    {
        try
        {
            await EventService.GetAllEvents();
            PaidEvents = EventService.Events
                .Where(e => e.AccessType != AccessType.Free)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        if (OnSave.HasDelegate)
            await OnSave.InvokeAsync(TicketModel);
    }

    private async Task Cancel()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private void OnEventSelected()
    {
        try
        {
            var selectedEvent = EventService.Events.FirstOrDefault(e => e.Id == TicketModel.EventId);
            _selectedEventHasSeats = selectedEvent?.HasSeat ?? false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking event seats: {ex.Message}");
            _selectedEventHasSeats = false;
        }
    }
}
