@* EventForm.razor *@

<EditForm Model="EventModel" OnValidSubmit="HandleSubmit" class="edit-form">
    <DataAnnotationsValidator />
    <h3>@(IsEventEditMode ? "Edit Event" : "Add Event")</h3>
    <div class="form-group">
        <label><strong>Title:</strong></label>
        <InputText @bind-Value="EventModel.Name" />
        <ValidationMessage For="@(() => EventModel.Name)" />
    </div>

    <div class="form-group">
        <label><strong>Description:</strong></label>
        <InputText @bind-Value="EventModel.Description" />
        <ValidationMessage For="@(() => EventModel.Description)" />
    </div>

    <div class="form-group">
        <label><strong>City:</strong></label>
        <InputText @bind-Value="EventModel.City" />
        <ValidationMessage For="@(() => EventModel.City)" />
    </div>

    <div class="form-group">
        <label><strong>Address:</strong></label>
        <InputText @bind-Value="EventModel.Address" />
        <ValidationMessage For="@(() => EventModel.Address)" />
    </div>

    <div class="form-group">
        <label><strong>AccessType:</strong></label>
        <InputSelect @bind-Value="EventModel.AccessType">
            @foreach(var type in Enum.GetValues<AccessType>())
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => EventModel.AccessType)" />
    </div>

    <div class="form-group">
        <label><strong>StartTime:</strong></label>
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="EventModel.StartTime" />
        <ValidationMessage For="@(() => EventModel.StartTime)" />
    </div>

    <div class="form-group">
        <label><strong>EndTime:</strong></label>
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="EventModel.EndTime" />
        <ValidationMessage For="@(() => EventModel.EndTime)" />
    </div>

    <div class="form-group">
        <label><strong>Max Tickets:</strong></label>
        <InputNumber @bind-Value="EventModel.TicketsMax" />
        <ValidationMessage For="@(() => EventModel.TicketsMax)" />
    </div>

    <div class="form-group">
        <label><strong>Has Seats:</strong></label>
        <InputCheckbox @bind-Value="EventModel.HasSeat" />
        <ValidationMessage For="@(() => EventModel.HasSeat)" />
    </div>

    <div class="form-group">
        <label><strong>Image Path:</strong></label>
        <InputText @bind-Value="EventModel.ImagePath" />
        <ValidationMessage For="@(() => EventModel.ImagePath)" />
    </div>

    <div class="button-container">
        <button type="submit">Save</button>
        <button type="button" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public EventDto EventModel { get; set; }
    [Parameter] public EventCallback<EventDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    [Parameter] public bool IsEventEditMode { get; set; } = false;

    private async Task HandleSubmit()
    {
        await OnSave.InvokeAsync(EventModel);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}
